---
source: harmonizer/src/lib.rs
expression: "harmonize(vec![ServiceDefinition ::\n               new(\"users\", \"undefined\",\n                   \"\n            type User {\n              id: ID\n              name: String\n            }\n\n            type Query {\n              users: [User!]\n            }\n          \"),\n               ServiceDefinition ::\n               new(\"movies\", \"undefined\",\n                   \"\n            type Movie {\n              title: String\n              name: String\n            }\n\n            extend type User {\n              favorites: [Movie!]\n            }\n\n            type Query {\n              movies: [Movie!]\n            }\n          \")]).unwrap()"
---
schema @using(spec: "https://specs.apollo.dev/cs/v0.1")
{
  query: Query
}


directive @cs__key(graph: cs__Graph!)
  repeatable on FRAGMENT_DEFINITION

directive @cs__resolve(
  graph: cs__Graph!,
  requires: cs__SelectionSet,
  provides: cs__SelectionSet)
  on FIELD_DEFINITION

directive @cs__error(
  graphs: [cs__Graph!],
  message: String)
    repeatable on OBJECT
    | INTERFACE
    | UNION
    | FIELD_DEFINITION

directive @cs__link(to: cs__OutboundLink!)
  on ENUM_VALUE

input cs__OutboundLink {
  http: cs__OutboundLinkHTTP
}

input cs__OutboundLinkHTTP {
  url: cs__URL
}

scalar cs__URL @specifiedBy(url: "https://specs.apollo.dev/v0.1#cs__url")
scalar cs__SelectionSet @specifiedBy(url: "https://specs.apollo.dev/v0.1#cs__selectionset")


enum cs__Graph {
  users @cs__link(to: { http: { url: "undefined" } }),
  movies @cs__link(to: { http: { url: "undefined" } })
}

type Movie {
  title: String
  name: String
}

type Query {
  users: [User!] @cs__resolve(graph: users)
  movies: [Movie!] @cs__resolve(graph: movies)
}

type User {
  id: ID
  name: String
  favorites: [Movie!] @cs__resolve(graph: movies)
}

