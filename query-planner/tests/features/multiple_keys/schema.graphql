schema
  @using(spec: "https://lib.apollo.dev/join/v0.1")
  @using(spec: "https://lib.apollo.dev/local/v0.1")
{
  query: Query
}

directive @using(
  spec: String!,
  prefix: String)
  repeatable on SCHEMA

scalar join__FragmentId @specifiedBy(url: "https://lib.apollo.dev/join/v0.1/#join__fragmentid")
scalar join__Url @specifiedBy(url: "https://lib.apollo.dev/join/v0.1/#join__url")
input join__OutboundLinkHttp {
    url: join__Url!
}
input join__OutboundLink {
    http: join__OutboundLinkHttp
}
directive @join__key(
  graph: join__Graph!)
  repeatable on FRAGMENT_DEFINITION
directive @join__field(
  graph: join__Graph!,
  requires: join__FragmentId,
  provides: join__FragmentId)
  on FIELD_DEFINITION
directive @join__error(
  graph: [join__Graph!]!,
  message: String)
  repeatable on OBJECT
  | INTERFACE
  | UNION
  | FIELD_DEFINITION
directive @join__link(
  to: join__OutboundLink!)
  on ENUM_VALUE

enum join__Graph {
  actuary @join__link(to: { http: { url: "undefined" } })
  reviews @join__link(to: { http: { url: "undefined" } })
  users @join__link(to: { http: { url: "undefined" } })
}


type Group {
  id: ID @join__field(graph: users)
  name: String @join__field(graph: users)
}



type Query {
  reviews: [Review!]! @join__field(graph: reviews)
  users: [User!]! @join__field(graph: users)
}



type Review {
  id: ID! @join__field(graph: reviews)
  author: User! @join__field(graph: reviews)
  body: String! @join__field(graph: reviews)
}



type User
{
  id: ID! @join__field(graph: users)
  ssn: ID! @join__field(graph: users)
  name: String! @join__field(graph: users)
  group: Group @join__field(graph: users)
  risk: Float @join__field(graph: actuary)
  reviews: [Review!]! @join__field(graph: reviews)
}
fragment local__id_0_User_ssn on User @join__key(graph: actuary)
{ ssn }
fragment local__id_1_User_id on User @join__key(graph: reviews)
{ id }
fragment local__id_2_User_group_id on User @join__key(graph: users)
{ group { id } }

