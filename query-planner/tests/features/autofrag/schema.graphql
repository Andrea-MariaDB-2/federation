schema
  @using(spec: "https://lib.apollo.dev/join/v0.1")
  @using(spec: "https://lib.apollo.dev/local/v0.1")
{
  query: Query
}

directive @using(
  spec: String!,
  prefix: String)
  repeatable on SCHEMA

scalar join__FragmentId @specifiedBy(url: "https://lib.apollo.dev/join/v0.1/#join__fragmentid")
scalar join__Url @specifiedBy(url: "https://lib.apollo.dev/join/v0.1/#join__url")
input join__OutboundLinkHttp {
    url: join__Url!
}
input join__OutboundLink {
    http: join__OutboundLinkHttp
}
directive @join__key(
  graph: join__Graph!)
  repeatable on FRAGMENT_DEFINITION
directive @join__field(
  graph: join__Graph!,
  requires: join__FragmentId,
  provides: join__FragmentId)
  on FIELD_DEFINITION
directive @join__error(
  graph: [join__Graph!]!,
  message: String)
  repeatable on OBJECT
  | INTERFACE
  | UNION
  | FIELD_DEFINITION
directive @join__link(
  to: join__OutboundLink!)
  on ENUM_VALUE

enum join__Graph {
  users @join__link(to: { http: { url: "undefined" } })
}


type A {
  b: B @join__field(graph: users)
}



type B {
  f1: String @join__field(graph: users)
  f2: String @join__field(graph: users)
  f3: String @join__field(graph: users)
  f4: String @join__field(graph: users)
  f5: String @join__field(graph: users)
  f6: String @join__field(graph: users)
}



interface IFace {
  x: Int @join__field(graph: users)
}

type IFaceImpl1 implements IFace {
  x: Int @join__field(graph: users)
}



type IFaceImpl2 implements IFace {
  x: Int @join__field(graph: users)
}



scalar Location

type Query {
  sender: SendingUser @join__field(graph: users)
  receiver: ReceivingUser @join__field(graph: users)
  field: SomeField @join__field(graph: users)
}



type ReceivingUser
{
  id: ID! @join__field(graph: users)
  name: String @join__field(graph: users)
  address: String @join__field(graph: users)
  location: Location @join__field(graph: users)
}
fragment local__id_0_ReceivingUser_id on ReceivingUser @join__key(graph: users)
{ id }


type SendingUser
{
  id: ID! @join__field(graph: users)
  name: String @join__field(graph: users)
  address: String @join__field(graph: users)
  location: Location @join__field(graph: users)
}
fragment local__id_1_SendingUser_id on SendingUser @join__key(graph: users)
{ id }


type SomeField {
  a: A @join__field(graph: users)
  b: B @join__field(graph: users)
  iface: IFace @join__field(graph: users)
}


