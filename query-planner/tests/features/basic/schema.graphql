schema
  @using(spec: "https://lib.apollo.dev/join/v0.1")
  @using(spec: "https://lib.apollo.dev/local/v0.1")
{
  query: Query
  mutation: Mutation
}

directive @using(
  spec: String!,
  prefix: String)
  repeatable on SCHEMA

scalar join__FragmentId @specifiedBy(url: "https://lib.apollo.dev/join/v0.1/#join__fragmentid")
scalar join__Url @specifiedBy(url: "https://lib.apollo.dev/join/v0.1/#join__url")
input join__OutboundLinkHttp {
    url: join__Url!
}
input join__OutboundLink {
    http: join__OutboundLinkHttp
}
directive @join__owner(
  graph: join__Graph,
  valueType: Bool)
  on OBJECT | INTERFACE
directive @join__key(
  graph: join__Graph!)
  repeatable on FRAGMENT_DEFINITION
directive @join(
  graph: join__Graph!,
  requires: join__FragmentId,
  provides: join__FragmentId)
  on FIELD_DEFINITION
directive @join__error(
  graph: [join__Graph!]!,
  message: String)
  repeatable on OBJECT
  | INTERFACE
  | UNION
  | FIELD_DEFINITION
directive @join__link(
  to: join__OutboundLink!)
  on ENUM_VALUE

enum join__Graph {
  accounts @join__link(to: { http: { url: "undefined" } })
  books @join__link(to: { http: { url: "undefined" } })
  documents @join__link(to: { http: { url: "undefined" } })
  inventory @join__link(to: { http: { url: "undefined" } })
  product @join__link(to: { http: { url: "undefined" } })
  reviews @join__link(to: { http: { url: "undefined" } })
}


directive @stream on FIELD

directive @transform(from: String!) on FIELD

union AccountType = PasswordAccount | SMSAccount

type Amazon @join__owner(graph: product) {
  referrer: String @join(graph: product)
}



union Body = Image | Text

type Book implements Product @join__owner(graph: books)
{
  isbn: String! @join(graph: books)
  title: String @join(graph: books)
  year: Int @join(graph: books)
  similarBooks: [Book]! @join(graph: books)
  metadata: [MetadataOrError] @join(graph: books)
  inStock: Boolean @join(graph: inventory)
  isCheckedOut: Boolean @join(graph: inventory)
  upc: String! @join(graph: product)
  sku: String! @join(graph: product)
  name(delimeter: String = " "): String @join(graph: product, requires: "local__id_0_Book_title_year")
  price: String @join(graph: product)
  details: ProductDetailsBook @join(graph: product)
  reviews: [Review] @join(graph: reviews)
  relatedReviews: [Review!]! @join(graph: reviews, requires: "local__id_1_Book_similarBooks_isbn")
}
fragment local__id_0_Book_title_year on Book
{ title year }
fragment local__id_1_Book_similarBooks_isbn on Book
{ similarBooks { isbn } }
fragment local__id_2_Book_isbn on Book @join__key(graph: books)
{ isbn }


union Brand = Ikea | Amazon

type Car implements Vehicle @join__owner(graph: product)
{
  id: String! @join(graph: product)
  description: String @join(graph: product)
  price: String @join(graph: product)
  retailPrice: String @join(graph: reviews, requires: "local__id_3_Car_price")
}
fragment local__id_3_Car_price on Car
{ price }
fragment local__id_4_Car_id on Car @join__key(graph: product)
{ id }


type Error @join__owner(valueType: true) {
  code: Int
  message: String
}



type Furniture implements Product @join__owner(graph: product)
{
  upc: String! @join(graph: product)
  sku: String! @join(graph: product)
  name: String @join(graph: product)
  price: String @join(graph: product)
  brand: Brand @join(graph: product)
  metadata: [MetadataOrError] @join(graph: product)
  details: ProductDetailsFurniture @join(graph: product)
  inStock: Boolean @join(graph: inventory)
  isHeavy: Boolean @join(graph: inventory)
  reviews: [Review] @join(graph: reviews)
}
fragment local__id_5_Furniture_sku on Furniture @join__key(graph: inventory)
{ sku }
fragment local__id_6_Furniture_upc on Furniture @join__key(graph: product)
{ upc }


type Ikea @join__owner(graph: product) {
  asile: Int @join(graph: product)
}



type Image @join__owner(graph: documents) {
  name: String! @join(graph: documents)
  attributes: ImageAttributes! @join(graph: documents)
}



type ImageAttributes @join__owner(graph: documents) {
  url: String! @join(graph: documents)
}



type KeyValue @join__owner(valueType: true) {
  key: String!
  value: String!
}



type Library @join__owner(graph: books)
{
  id: ID! @join(graph: books)
  name: String @join(graph: books)
  userAccount(id: ID! = 1): User @join(graph: accounts, requires: "local__id_7_Library_name")
}
fragment local__id_7_Library_name on Library
{ name }
fragment local__id_8_Library_id on Library @join__key(graph: accounts)
{ id }


union MetadataOrError = KeyValue | Error

type Mutation @join__owner {
  login(username: String!, password: String!): User @join(graph: accounts)
  reviewProduct(upc: String!, body: String!): Product @join(graph: reviews)
  updateReview(review: UpdateReviewInput!): Review @join(graph: reviews)
  deleteReview(id: ID!): Boolean @join(graph: reviews)
}



type Name @join__owner(graph: accounts) {
  first: String @join(graph: accounts)
  last: String @join(graph: accounts)
}



type PasswordAccount @join__owner(graph: accounts)
{
  email: String! @join(graph: accounts)
}
fragment local__id_9_PasswordAccount_email on PasswordAccount @join__key(graph: accounts)
{ email }


interface Product @join__owner(graph: product) {
  upc: String!
  sku: String!
  name: String
  price: String
  details: ProductDetails
  inStock: Boolean
  reviews: [Review]
}

interface ProductDetails @join__owner(graph: product) {
  country: String
}

type ProductDetailsBook implements ProductDetails @join__owner(graph: product) {
  country: String @join(graph: product)
  pages: Int @join(graph: product)
}



type ProductDetailsFurniture implements ProductDetails @join__owner(graph: product) {
  country: String @join(graph: product)
  color: String @join(graph: product)
}



type Query @join__owner {
  user(id: ID!): User @join(graph: accounts)
  me: User @join(graph: accounts)
  book(isbn: String!): Book @join(graph: books)
  books: [Book] @join(graph: books)
  library(id: ID!): Library @join(graph: books)
  body: Body! @join(graph: documents)
  product(upc: String!): Product @join(graph: product)
  vehicle(id: String!): Vehicle @join(graph: product)
  topProducts(first: Int = 5): [Product] @join(graph: product)
  topCars(first: Int = 5): [Car] @join(graph: product)
  topReviews(first: Int = 5): [Review] @join(graph: reviews)
}



type Review @join__owner(graph: reviews)
{
  id: ID! @join(graph: reviews)
  body(format: Boolean = false): String @join(graph: reviews)
  author: User @join(graph: reviews, provides: "local__id_10_Review_username")
  product: Product @join(graph: reviews)
  metadata: [MetadataOrError] @join(graph: reviews)
}
fragment local__id_10_Review_username on Review
{ username }
fragment local__id_11_Review_id on Review @join__key(graph: reviews)
{ id }


type SMSAccount @join__owner(graph: accounts)
{
  number: String @join(graph: accounts)
}
fragment local__id_12_SMSAccount_number on SMSAccount @join__key(graph: accounts)
{ number }


type Text @join__owner(graph: documents) {
  name: String! @join(graph: documents)
  attributes: TextAttributes! @join(graph: documents)
}



type TextAttributes @join__owner(graph: documents) {
  bold: Boolean @join(graph: documents)
  text: String @join(graph: documents)
}



union Thing = Car | Ikea

input UpdateReviewInput {
  id: ID!
  body: String
}

type User @join__owner(graph: accounts)
{
  id: ID! @join(graph: accounts)
  name: Name @join(graph: accounts)
  username: String @join(graph: accounts)
  birthDate(locale: String): String @join(graph: accounts)
  account: AccountType @join(graph: accounts)
  metadata: [UserMetadata] @join(graph: accounts)
  goodDescription: Boolean @join(graph: inventory, requires: "local__id_13_User_metadata_description")
  vehicle: Vehicle @join(graph: product)
  thing: Thing @join(graph: product)
  reviews: [Review] @join(graph: reviews)
  numberOfReviews: Int! @join(graph: reviews)
  goodAddress: Boolean @join(graph: reviews, requires: "local__id_14_User_metadata_address")
}
fragment local__id_13_User_metadata_description on User
{ metadata { description } }
fragment local__id_14_User_metadata_address on User
{ metadata { address } }
fragment local__id_15_User_id on User @join__key(graph: accounts)
{ id }
fragment local__id_16_User_username_name_first_last on User @join__key(graph: accounts)
{ username name { first last } }


type UserMetadata @join__owner(graph: accounts) {
  name: String @join(graph: accounts)
  address: String @join(graph: accounts)
  description: String @join(graph: accounts)
}



type Van implements Vehicle @join__owner(graph: product)
{
  id: String! @join(graph: product)
  description: String @join(graph: product)
  price: String @join(graph: product)
  retailPrice: String @join(graph: reviews, requires: "local__id_17_Van_price")
}
fragment local__id_17_Van_price on Van
{ price }
fragment local__id_18_Van_id on Van @join__key(graph: product)
{ id }


interface Vehicle @join__owner(graph: product) {
  id: String!
  description: String
  price: String
  retailPrice: String
}
