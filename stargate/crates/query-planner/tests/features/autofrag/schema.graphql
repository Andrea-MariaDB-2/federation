schema @using(spec: "https://specs.apollo.dev/cs/v0.1")
{
  query: Query
}


directive @cs__key(graph: cs__Graph!)
  repeatable on FRAGMENT_DEFINITION

directive @cs__resolve(
  graph: cs__Graph!,
  requires: cs__SelectionSet,
  provides: cs__SelectionSet)
  on FIELD_DEFINITION

directive @cs__error(
  graphs: [cs__Graph!],
  message: String)
    repeatable on OBJECT
    | INTERFACE
    | UNION
    | FIELD_DEFINITION

directive @cs__link(to: cs__OutboundLink!)
  on ENUM_VALUE

input cs__OutboundLink {
  http: cs__OutboundLinkHTTP
}

input cs__OutboundLinkHTTP {
  url: cs__URL
}

scalar cs__URL @specifiedBy(url: "https://specs.apollo.dev/v0.1#cs__url")
scalar cs__SelectionSet @specifiedBy(url: "https://specs.apollo.dev/v0.1#cs__selectionset")


enum cs__Graph {
  users @cs__link(to: { http: { url: "undefined" } })
}

type A {
  b: B
}

type B {
  f1: String
  f2: String
  f3: String
  f4: String
  f5: String
  f6: String
}

interface IFace {
  x: Int
}

type IFaceImpl1 implements IFace {
  x: Int
}

type IFaceImpl2 implements IFace {
  x: Int
}

scalar Location

type Query {
  sender: SendingUser @cs__resolve(graph: users)
  receiver: ReceivingUser @cs__resolve(graph: users)
  field: SomeField @cs__resolve(graph: users)
}

type ReceivingUser
{
  id: ID!
  name: String
  address: String
  location: Location
}
fragment cs__keyFor_ReceivingUser_0 on ReceivingUser @cs__key(graph: users) { id }


type SendingUser
{
  id: ID!
  name: String
  address: String
  location: Location
}
fragment cs__keyFor_SendingUser_1 on SendingUser @cs__key(graph: users) { id }


type SomeField {
  a: A
  b: B
  iface: IFace
}
