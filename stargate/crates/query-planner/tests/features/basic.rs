
// Autogenerated from build.rs
use apollo_query_planner::QueryPlanningOptions;
use crate::helpers::assert_query_plan;

# [test] fn mutationsfeature_supports_mutations () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    reviews {\n      product {\n        upc\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [\"username\", \"password\"],\n        \"operation\": \"mutation($username:String!$password:String!){login(username:$username password:$password){__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"login\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"login\", \"reviews\", \"@\", \"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{upc}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn mutationsfeature_mutations_across_service_boundaries () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation Review($upc: String!, $body: String!) {\n  reviewProduct(upc: $upc, body: $body) {\n    ... on Furniture {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\"upc\", \"body\"],\n        \"operation\": \"mutation($upc:String!$body:String!){reviewProduct(upc:$upc body:$body){__typename ...on Furniture{__typename upc}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"reviewProduct\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"upc\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Furniture{name}}}\"\n        }\n      }\n    ]\n  }\n}\n\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn mutationsfeature_multiple_root_mutations () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation LoginAndReview(\n  $username: String!\n  $password: String!\n  $upc: String!\n  $body: String!\n) {\n  login(username: $username, password: $password) {\n    reviews {\n      product {\n        upc\n      }\n    }\n  }\n  reviewProduct(upc: $upc, body: $body) {\n    ... on Furniture {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [\"username\", \"password\"],\n        \"operation\": \"mutation($username:String!$password:String!){login(username:$username password:$password){__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"login\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"login\", \"reviews\", \"@\", \"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{upc}}}\"\n        }\n      },\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\"upc\", \"body\"],\n        \"operation\": \"mutation($upc:String!$body:String!){reviewProduct(upc:$upc body:$body){__typename ...on Furniture{__typename upc}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"reviewProduct\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"upc\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Furniture{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn mutationsfeature_multiple_root_mutations_with_correct_service_order () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation LoginAndReview(\n  $upc: String!\n  $body: String!\n  $updatedReview: UpdateReviewInput!\n  $username: String!\n  $password: String!\n  $reviewId: ID!\n) {\n  reviewProduct(upc: $upc, body: $body) {\n    ... on Furniture {\n      upc\n    }\n  }\n  updateReview(review: $updatedReview) {\n    id\n    body\n  }\n  login(username: $username, password: $password) {\n    reviews {\n      product {\n        upc\n      }\n    }\n  }\n  deleteReview(id: $reviewId)\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\"upc\", \"body\", \"updatedReview\"],\n        \"operation\": \"mutation($upc:String!$body:String!$updatedReview:UpdateReviewInput!){reviewProduct(upc:$upc body:$body){__typename ...on Furniture{upc}}updateReview(review:$updatedReview){id body}}\"\n      },\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [\"username\", \"password\"],\n        \"operation\": \"mutation($username:String!$password:String!){login(username:$username password:$password){__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"login\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"login\", \"reviews\", \"@\", \"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{upc}}}\"\n        }\n      },\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\"reviewId\"],\n        \"operation\": \"mutation($reviewId:ID!){deleteReview(id:$reviewId)}\"\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn aliasesfeature_supports_simple_aliases () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    name\n    title: name\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{name title:name}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"books\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" },\n                { \"kind\": \"Field\", \"name\": \"title\" },\n                { \"kind\": \"Field\", \"name\": \"year\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name title:name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn aliasesfeature_supports_aliases_of_root_fields_on_subservices () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    name\n    title: name\n    reviews {\n      body\n    }\n    productReviews: reviews {\n      body\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{name title:name __typename upc}}}\"\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Sequence\",\n            \"nodes\": [\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"books\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n                }\n              },\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"product\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" },\n                        { \"kind\": \"Field\", \"name\": \"title\" },\n                        { \"kind\": \"Field\", \"name\": \"year\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name title:name}}}\"\n                }\n              }\n            ]\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"reviews\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                },\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Furniture\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"upc\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{reviews{body}productReviews:reviews{body}}...on Furniture{reviews{body}productReviews:reviews{body}}}}\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn aliasesfeature_supports_aliases_of_nested_fields_on_subservices () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    name\n    title: name\n    reviews {\n      content: body\n      body\n    }\n    productReviews: reviews {\n      body\n      reviewer: author {\n        name: username\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{name title:name __typename upc}}}\"\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Sequence\",\n            \"nodes\": [\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"books\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n                }\n              },\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"product\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" },\n                        { \"kind\": \"Field\", \"name\": \"title\" },\n                        { \"kind\": \"Field\", \"name\": \"year\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name title:name}}}\"\n                }\n              }\n            ]\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"reviews\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                },\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Furniture\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"upc\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{reviews{content:body body}productReviews:reviews{body reviewer:author{name:username}}}...on Furniture{reviews{content:body body}productReviews:reviews{body reviewer:author{name:username}}}}}\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn introspectionfeature_Can_execute_schema_introspection_query () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n" , "\n{ \"kind\": \"QueryPlan\" }\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn introspectionfeature_Can_execute_type_introspection_query () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery($foo:String!) {\n  __type(name:$foo) {\n    enumValues{ __typename name }\n  }\n}\n" , "\n{ \"kind\": \"QueryPlan\" }\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn requiresfeature_supports_passing_additional_fields_defined_by_a_requires () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviwedBookNames {\n  me {\n    reviews {\n      product {\n        ... on Book {\n          name\n        }\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"books\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" },\n                { \"kind\": \"Field\", \"name\": \"title\" },\n                { \"kind\": \"Field\", \"name\": \"year\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n        }\n      }\n    ]\n  }\n}\n\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn providesfeature_does_not_have_to_go_to_another_service_when_field_is_given () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers {\n  topReviews {\n    author {\n      username\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [],\n    \"operation\": \"{topReviews{author{username}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn providesfeature_does_not_load_fields_provided_even_when_going_to_other_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers {\n  topReviews {\n    author {\n      username\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{author{username __typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn custom_directivesfeature_successfully_passes_directives_along_in_requests_to_an_underlying_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers {\n  topReviews {\n    body @stream\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [],\n    \"operation\": \"{topReviews{body@stream}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn custom_directivesfeature_successfully_passes_directives_and_their_variables_along_in_requests_to_underlying_services () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers {\n  topReviews {\n    body @stream\n    author @transform(from: \"JSON\") {\n      name @stream\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{body@stream author@transform(from:\\\"JSON\\\"){__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name@stream}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_should_not_confuse_union_types_with_overlapping_field_names () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  body {\n    ...on Image {\n      attributes {\n        url\n      }\n    }\n    ...on Text {\n      attributes {\n        bold\n        text\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"documents\",\n    \"variableUsages\": [],\n    \"operation\": \"{body{__typename ...on Image{attributes{url}}...on Text{attributes{bold text}}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_should_use_a_single_fetch_when_requesting_a_root_field_from_one_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  me {\n    name\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"accounts\",\n    \"variableUsages\": [],\n    \"operation\": \"{me{name}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_should_use_two_independent_fetches_when_requesting_root_fields_from_two_services () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  me {\n    name\n  }\n  topProducts {\n    name\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Parallel\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{name}}\"\n      },\n      {\n        \"kind\": \"Sequence\",\n        \"nodes\": [\n          {\n            \"kind\": \"Fetch\",\n            \"serviceName\": \"product\",\n            \"variableUsages\": [],\n            \"operation\": \"{topProducts{__typename ...on Book{__typename isbn}...on Furniture{name}}}\"\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"topProducts\", \"@\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"books\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n            }\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"topProducts\", \"@\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"product\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" },\n                    { \"kind\": \"Field\", \"name\": \"title\" },\n                    { \"kind\": \"Field\", \"name\": \"year\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_should_use_a_single_fetch_when_requesting_multiple_root_fields_from_the_same_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topProducts {\n    name\n  }\n  product(upc: \"1\") {\n    name\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [],\n        \"operation\": \"{topProducts{__typename ...on Book{__typename isbn}...on Furniture{name}}product(upc:\\\"1\\\"){__typename ...on Book{__typename isbn}...on Furniture{name}}}\"\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Sequence\",\n            \"nodes\": [\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"topProducts\", \"@\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"books\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n                }\n              },\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"topProducts\", \"@\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"product\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" },\n                        { \"kind\": \"Field\", \"name\": \"title\" },\n                        { \"kind\": \"Field\", \"name\": \"year\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n                }\n              }\n            ]\n          },\n          {\n            \"kind\": \"Sequence\",\n            \"nodes\": [\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"books\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n                }\n              },\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"product\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" },\n                        { \"kind\": \"Field\", \"name\": \"title\" },\n                        { \"kind\": \"Field\", \"name\": \"year\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n                }\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_should_use_a_single_fetch_when_requesting_relationship_subfields_from_the_same_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topReviews {\n    body\n    author {\n      reviews {\n        body\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [],\n    \"operation\": \"{topReviews{body author{reviews{body}}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_should_use_a_single_fetch_when_requesting_relationship_subfields_and_provided_keys_from_the_same_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topReviews {\n    body\n    author {\n      id\n      reviews {\n        body\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [],\n    \"operation\": \"{topReviews{body author{id reviews{body}}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_when_requesting_an_extension_field_from_another_service_it_should_add_the_fields_representation_requirements_to_the_parent_selection_set_and_use_a_dependent_fetch () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  me {\n    name\n    reviews {\n      body\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{name __typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{body}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_when_requesting_an_extension_field_from_another_service_when_the_parent_selection_set_is_empty_should_add_the_fields_requirements_to_the_parent_selection_set_and_use_a_dependent_fetch () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  me {\n    reviews {\n      body\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{body}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_when_requesting_an_extension_field_from_another_service_should_only_add_requirements_once () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  me {\n    reviews {\n      body\n    }\n    numberOfReviews\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{body}numberOfReviews}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_when_requesting_a_composite_field_with_subfields_from_another_service_it_should_add_key_fields_to_the_parent_selection_set_and_use_a_dependent_fetch () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topReviews {\n    body\n    author {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{body author{__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_when_requesting_a_composite_field_with_subfields_from_another_service_when_requesting_a_field_defined_in_another_service_which_requires_a_field_in_the_base_service_it_should_add_the_field_provided_by_base_service_in_first_Fetch () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topCars {\n    retailPrice\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [],\n        \"operation\": \"{topCars{__typename id price}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topCars\", \"@\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Car\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" },\n                { \"kind\": \"Field\", \"name\": \"price\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Car{retailPrice}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_when_requesting_a_composite_field_with_subfields_from_another_service_when_the_parent_selection_set_is_empty_it_should_add_key_fields_to_the_parent_selection_set_and_use_a_dependent_fetch () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topReviews {\n    author {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{author{__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_when_requesting_a_relationship_field_with_extension_subfields_from_a_different_service_it_should_first_fetch_the_object_using_a_key_from_the_base_service_and_then_pass_through_the_requirements () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topReviews {\n    author {\n      birthDate\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{author{__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{birthDate}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_for_abstract_types_it_should_add___typename_when_fetching_objects_of_an_interface_type_from_a_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topProducts {\n    price\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"product\",\n    \"variableUsages\": [],\n    \"operation\": \"{topProducts{__typename ...on Book{price}...on Furniture{price}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_should_break_up_when_traversing_an_extension_field_on_an_interface_type_from_a_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topProducts {\n    price\n    reviews {\n      body\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [],\n        \"operation\": \"{topProducts{__typename ...on Book{price __typename isbn}...on Furniture{price __typename upc}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topProducts\", \"@\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            },\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"upc\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{reviews{body}}...on Furniture{reviews{body}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_interface_fragments_should_expand_into_possible_types_only () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  books {\n    ... on Product {\n      name\n      ... on Furniture {\n        upc\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"books\",\n        \"variableUsages\": [],\n        \"operation\": \"{books{__typename isbn title year}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"books\", \"@\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" },\n                { \"kind\": \"Field\", \"name\": \"title\" },\n                { \"kind\": \"Field\", \"name\": \"year\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_interface_inside_interface_should_expand_into_possible_types_only () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  product(upc: \"\") {\n    details {\n      country\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"product\",\n    \"variableUsages\": [],\n    \"operation\": \"{product(upc:\\\"\\\"){__typename ...on Book{details{country}}...on Furniture{details{country}}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_experimental_compression_to_downstream_services_should_generate_fragments_internally_to_downstream_requests () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topReviews {\n    body\n    author\n    product {\n      name\n      price\n      details {\n        country\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{...__QueryPlanFragment_1__}}fragment __QueryPlanFragment_0__ on Product{__typename ...on Book{__typename isbn}...on Furniture{__typename upc}}fragment __QueryPlanFragment_1__ on Review{body author product{...__QueryPlanFragment_0__}}\"\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Sequence\",\n            \"nodes\": [\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"topReviews\", \"@\", \"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"books\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n                }\n              },\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"topReviews\", \"@\", \"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"product\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" },\n                        { \"kind\": \"Field\", \"name\": \"title\" },\n                        { \"kind\": \"Field\", \"name\": \"year\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n                }\n              }\n            ]\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"topReviews\", \"@\", \"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"product\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Furniture\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"upc\" }\n                  ]\n                },\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Furniture{name price details{country}}...on Book{price details{country}}}}\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : true }) ; }# [test] fn build_query_planfeature_experimental_compression_to_downstream_services_shouldnt_generate_fragments_for_selection_sets_of_length_2_or_less () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topReviews {\n    body\n    author\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [],\n    \"operation\": \"{topReviews{body author}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : true }) ; }# [test] fn build_query_planfeature_experimental_compression_to_downstream_services_should_generate_fragments_for_selection_sets_of_length_3_or_greater () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  topReviews {\n    id\n    body\n    author\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [],\n    \"operation\": \"{topReviews{...__QueryPlanFragment_0__}}fragment __QueryPlanFragment_0__ on Review{id body author}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : true }) ; }# [test] fn build_query_planfeature_experimental_compression_to_downstream_services_should_generate_fragments_correctly_when_aliases_are_used () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  reviews: topReviews {\n    content: body\n    author\n    product {\n      name\n      cost: price\n      details {\n        origin: country\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{reviews:topReviews{...__QueryPlanFragment_1__}}fragment __QueryPlanFragment_0__ on Product{__typename ...on Book{__typename isbn}...on Furniture{__typename upc}}fragment __QueryPlanFragment_1__ on Review{content:body author product{...__QueryPlanFragment_0__}}\"\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Sequence\",\n            \"nodes\": [\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"reviews\", \"@\", \"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"books\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n                }\n              },\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"reviews\", \"@\", \"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"product\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" },\n                        { \"kind\": \"Field\", \"name\": \"title\" },\n                        { \"kind\": \"Field\", \"name\": \"year\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n                }\n              }\n            ]\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"reviews\", \"@\", \"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"product\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Furniture\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"upc\" }\n                  ]\n                },\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Furniture{name cost:price details{origin:country}}...on Book{cost:price details{origin:country}}}}\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : true }) ; }# [test] fn build_query_planfeature_should_properly_expand_nested_unions_with_inline_fragments () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  body {\n    ... on Image {\n      ... on Body {\n        ... on Image {\n          attributes {\n            url\n          }\n        }\n        ... on Text {\n          attributes {\n            bold\n            text\n          }\n        }\n      }\n    }\n    ... on Text {\n      attributes {\n        bold\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"documents\",\n    \"variableUsages\": [],\n    \"operation\": \"{body{__typename ...on Image{attributes{url}}...on Text{attributes{bold}}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_deduplicates_fields__selections_regardless_of_adjacency_and_type_condition_nesting_for_inline_fragments () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n  body {\n    ... on Image {\n      ... on Text {\n        attributes {\n          bold\n        }\n      }\n    }\n    ... on Body {\n      ... on Text {\n        attributes {\n          bold\n          text\n        }\n      }\n    }\n    ... on Text {\n      attributes {\n        bold\n        text\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"documents\",\n    \"variableUsages\": [],\n    \"operation\": \"{body{__typename ...on Text{attributes{bold text}}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_deduplicates_fields__selections_regardless_of_adjacency_and_type_condition_nesting_for_named_fragment_spreads () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nfragment TextFragment on Text {\n  attributes {\n    bold\n    text\n  }\n}\n\nquery {\n  body {\n    ... on Image {\n      ...TextFragment\n    }\n    ... on Body {\n      ...TextFragment\n    }\n    ...TextFragment\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"documents\",\n    \"variableUsages\": [],\n    \"operation\": \"{body{__typename ...on Text{attributes{bold text}}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_supports_basic_single_service_mutation () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    id\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"accounts\",\n    \"variableUsages\": [\n      \"username\",\n      \"password\"\n    ],\n    \"operation\": \"mutation($username:String!$password:String!){login(username:$username password:$password){id}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_supports_mutations_with_a_cross_service_request () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    reviews {\n      product {\n        upc\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [\n          \"username\",\n          \"password\"\n        ],\n        \"operation\": \"mutation($username:String!$password:String!){login(username:$username password:$password){__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"login\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"id\"\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"login\",\n          \"reviews\",\n          \"@\",\n          \"product\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"isbn\"\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{upc}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_returning_across_service_boundaries () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation Review($upc: String!, $body: String!) {\n  reviewProduct(upc: $upc, body: $body) {\n    ... on Furniture {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\n          \"upc\",\n          \"body\"\n        ],\n        \"operation\": \"mutation($upc:String!$body:String!){reviewProduct(upc:$upc body:$body){__typename ...on Furniture{__typename upc}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"reviewProduct\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"upc\"\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Furniture{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_supports_multiple_root_mutations () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation LoginAndReview(\n  $username: String!\n  $password: String!\n  $upc: String!\n  $body: String!\n) {\n  login(username: $username, password: $password) {\n    reviews {\n      product {\n        upc\n      }\n    }\n  }\n  reviewProduct(upc: $upc, body: $body) {\n    ... on Furniture {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [\n          \"username\",\n          \"password\"\n        ],\n        \"operation\": \"mutation($username:String!$password:String!){login(username:$username password:$password){__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"login\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"id\"\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"login\",\n          \"reviews\",\n          \"@\",\n          \"product\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"isbn\"\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{upc}}}\"\n        }\n      },\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\n          \"upc\",\n          \"body\"\n        ],\n        \"operation\": \"mutation($upc:String!$body:String!){reviewProduct(upc:$upc body:$body){__typename ...on Furniture{__typename upc}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"reviewProduct\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"upc\"\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Furniture{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_multiple_root_mutations_with_correct_service_order () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nmutation LoginAndReview(\n  $upc: String!\n  $body: String!\n  $updatedReview: UpdateReviewInput!\n  $username: String!\n  $password: String!\n  $reviewId: ID!\n) {\n  reviewProduct(upc: $upc, body: $body) {\n    ... on Furniture {\n      upc\n    }\n  }\n  updateReview(review: $updatedReview) {\n    id\n    body\n  }\n  login(username: $username, password: $password) {\n    reviews {\n      product {\n        upc\n      }\n    }\n  }\n  deleteReview(id: $reviewId)\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\n          \"upc\",\n          \"body\",\n          \"updatedReview\"\n        ],\n        \"operation\": \"mutation($upc:String!$body:String!$updatedReview:UpdateReviewInput!){reviewProduct(upc:$upc body:$body){__typename ...on Furniture{upc}}updateReview(review:$updatedReview){id body}}\"\n      },\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [\n          \"username\",\n          \"password\"\n        ],\n        \"operation\": \"mutation($username:String!$password:String!){login(username:$username password:$password){__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"login\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"id\"\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"login\",\n          \"reviews\",\n          \"@\",\n          \"product\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"isbn\"\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{upc}}}\"\n        }\n      },\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\n          \"reviewId\"\n        ],\n        \"operation\": \"mutation($reviewId:ID!){deleteReview(id:$reviewId)}\"\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn build_query_planfeature_supports_arrays () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery MergeArrays {\n  me {\n    # goodAddress\n    goodDescription\n    metadata {\n      address\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{__typename id metadata{description address}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\n          \"me\"\n        ],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"inventory\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"__typename\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"id\"\n                },\n                {\n                  \"kind\": \"Field\",\n                  \"name\": \"metadata\",\n                  \"selections\": [\n                    {\n                      \"kind\": \"Field\",\n                      \"name\": \"description\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{goodDescription}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn variablesfeature_passes_variables_to_root_fields () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    name\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{name}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"books\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" },\n                { \"kind\": \"Field\", \"name\": \"title\" },\n                { \"kind\": \"Field\", \"name\": \"year\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn variablesfeature_supports_default_variables_in_a_variable_definition () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String = \"1\") {\n  product(upc: $upc) {\n    name\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String=\\\"1\\\"){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{name}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"books\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" },\n                { \"kind\": \"Field\", \"name\": \"title\" },\n                { \"kind\": \"Field\", \"name\": \"year\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn variablesfeature_passes_variables_to_nested_services () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProductsForUser($format: Boolean) {\n  me {\n    reviews {\n      body(format: $format)\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [\"format\"],\n          \"operation\": \"query($representations:[_Any!]!$format:Boolean){_entities(representations:$representations){...on User{reviews{body(format:$format)}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn variablesfeature_works_with_default_variables_in_the_schema () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery LibraryUser($libraryId: ID!, $userId: ID) {\n  library(id: $libraryId) {\n    userAccount(id: $userId) {\n      id\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"books\",\n        \"variableUsages\": [\"libraryId\"],\n        \"operation\": \"query($libraryId:ID!){library(id:$libraryId){__typename id name}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"library\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Library\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" },\n                { \"kind\": \"Field\", \"name\": \"name\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [\"userId\"],\n          \"operation\": \"query($representations:[_Any!]!$userId:ID){_entities(representations:$representations){...on Library{userAccount(id:$userId){id name}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn variablesfeature_String_arguments_with_quotes_that_need_to_be_escaped () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery {\n vehicle(id: \"{\\\"make\\\":\\\"Toyota\\\",\\\"model\\\":\\\"Rav4\\\",\\\"trim\\\":\\\"Limited\\\"}\")\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"product\",\n    \"variableUsages\": [],\n    \"operation\": \"{vehicle(id:\\\"{\\\\\\\"make\\\\\\\":\\\\\\\"Toyota\\\\\\\",\\\\\\\"model\\\\\\\":\\\\\\\"Rav4\\\\\\\",\\\\\\\"trim\\\\\\\":\\\\\\\"Limited\\\\\\\"}\\\"){__typename}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn booleanfeature_supports_skip_when_a_boolean_condition_is_met () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers {\n  topReviews {\n    body\n    author @skip(if: true) {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{body author@skip(if:true){__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn booleanfeature_supports_skip_when_a_boolean_condition_is_met_variable_driven () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers($skip: Boolean! = true) {\n  topReviews {\n    body\n    author @skip(if: $skip) {\n      username\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [\"skip\"],\n    \"operation\": \"query($skip:Boolean!=true){topReviews{body author@skip(if:$skip){username}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn booleanfeature_supports_skip_when_a_boolean_condition_is_not_met () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers {\n  topReviews {\n    body\n    author @skip(if: false) {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{body author@skip(if:false){__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn booleanfeature_supports_skip_when_a_boolean_condition_is_not_met_variable_driven () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers($skip: Boolean!) {\n  topReviews {\n    body\n    author @skip(if: $skip) {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\"skip\"],\n        \"operation\": \"query($skip:Boolean!){topReviews{body author@skip(if:$skip){__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn booleanfeature_supports_include_when_a_boolean_condition_is_not_met () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers {\n  topReviews {\n    body\n    author @include(if: false) {\n      username\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [],\n    \"operation\": \"{topReviews{body author@include(if:false){username}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn booleanfeature_supports_include_when_a_boolean_condition_is_not_met_variable_driven () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers($include: Boolean! = false) {\n  topReviews {\n    body\n    author @include(if: $include) {\n      username\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"reviews\",\n    \"variableUsages\": [\"include\"],\n    \"operation\": \"query($include:Boolean!=false){topReviews{body author@include(if:$include){username}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn booleanfeature_supports_include_when_a_boolean_condition_is_met () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers {\n  topReviews {\n    body\n    author @include(if: true) {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{body author@include(if:true){__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn booleanfeature_supports_include_when_a_boolean_condition_is_met_variable_driven () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetReviewers($include: Boolean!) {\n  topReviews {\n    body\n    author @include(if: $include) {\n      name\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [\"include\"],\n        \"operation\": \"query($include:Boolean!){topReviews{body author@include(if:$include){__typename id}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"topReviews\", \"@\", \"author\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"accounts\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn execution_stylefeature_supports_parallel_root_fields () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUserAndReviews {\n  me {\n    username\n  }\n  topReviews {\n    body\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Parallel\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{username}}\"\n      },\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"reviews\",\n        \"variableUsages\": [],\n        \"operation\": \"{topReviews{body}}\"\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn value_typesfeature_resolves_value_types_within_their_respective_services () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nfragment Metadata on MetadataOrError {\n  ... on KeyValue {\n    key\n    value\n  }\n  ... on Error {\n    code\n    message\n  }\n}\n\nquery ProducsWithMetadata {\n  topProducts(first: 10) {\n    upc\n    ... on Book {\n      metadata {\n        ...Metadata\n      }\n    }\n    ... on Furniture {\n      metadata {\n        ...Metadata\n      }\n    }\n    reviews {\n      metadata {\n        ...Metadata\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [],\n        \"operation\": \"{topProducts(first:10){__typename ...on Book{upc __typename isbn}...on Furniture{upc metadata{__typename ...on KeyValue{key value}...on Error{code message}}__typename}}}\"\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"topProducts\", \"@\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"books\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{metadata{__typename ...on KeyValue{key value}...on Error{code message}}}}}\"\n            }\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"topProducts\", \"@\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"reviews\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                },\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Furniture\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"upc\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{reviews{metadata{__typename ...on KeyValue{key value}...on Error{code message}}}}...on Furniture{reviews{metadata{__typename ...on KeyValue{key value}...on Error{code message}}}}}}\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn fragmentsfeature_supports_inline_fragments_one_level () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUser {\n  me {\n    ... on User {\n      username\n    }\n  }\n}\n" , "\n{\"kind\":\"QueryPlan\",\"node\":{\"kind\":\"Fetch\",\"serviceName\":\"accounts\",\"variableUsages\":[],\"operation\":\"{me{username}}\"}}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn fragmentsfeature_supports_inline_fragments_multi_level () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUser {\n  me {\n    ... on User {\n      username\n      reviews {\n        ... on Review {\n          body\n          product {\n            ... on Product {\n              ... on Book {\n                title\n              }\n              ... on Furniture {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{username __typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{body product{__typename ...on Book{__typename isbn}...on Furniture{__typename upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"books\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{title}}}\"\n            }\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"product\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Furniture\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"upc\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Furniture{name}}}\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn fragmentsfeature_supports_named_fragments_one_level () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUser {\n  me {\n    ...userDetails\n  }\n}\n\nfragment userDetails on User {\n  username\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"accounts\",\n    \"variableUsages\": [],\n    \"operation\": \"{me{username}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn fragmentsfeature_supports_multiple_named_fragments_one_level_mixed_ordering () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nfragment userInfo on User {\n  name\n}\nquery GetUser {\n  me {\n    ...userDetails\n    ...userInfo\n  }\n}\n\nfragment userDetails on User {\n  username\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"accounts\",\n    \"variableUsages\": [],\n    \"operation\": \"{me{username name}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn fragmentsfeature_supports_multiple_named_fragments_multi_level_mixed_ordering () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nfragment reviewDetails on Review {\n  body\n}\nquery GetUser {\n  me {\n    ...userDetails\n  }\n}\n\nfragment userDetails on User {\n  username\n  reviews {\n    ...reviewDetails\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{username __typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{body}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn fragmentsfeature_supports_variables_within_fragments () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUser($format: Boolean) {\n  me {\n    ...userDetails\n  }\n}\n\nfragment userDetails on User {\n  username\n  reviews {\n    body(format: $format)\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{username __typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [\"format\"],\n          \"operation\": \"query($representations:[_Any!]!$format:Boolean){_entities(representations:$representations){...on User{reviews{body(format:$format)}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn fragmentsfeature_supports_root_fragments () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUser {\n  ... on Query {\n    me {\n      username\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"accounts\",\n    \"variableUsages\": [],\n    \"operation\": \"{me{username}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn fragmentsfeature_supports_directives_on_inline_fragments_httpsgithubcomapollographqlfederationissues177 () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetVehicle {\n  vehicle(id:\"rav4\") {\n    ... on Car @fragmentDirective {\n      price\n      thing {\n        ... on Ikea {\n          asile\n        }\n      }\n    }\n    ... on Van {\n      price @fieldDirective\n    }\n  }\n}\n" , "\n{\"kind\":\"QueryPlan\",\"node\":{\"kind\":\"Fetch\",\"serviceName\":\"product\",\"variableUsages\":[],\"operation\":\"{vehicle(id:\\\"rav4\\\"){__typename ...on Car@fragmentDirective{price thing{__typename ...on Ikea{asile}}}...on Van{price@fieldDirective}}}\"}}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn abstract_typesfeature_handles_an_abstract_type_from_the_base_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    upc\n    name\n    price\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{upc __typename isbn price}...on Furniture{upc name price}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"books\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" },\n                { \"kind\": \"Field\", \"name\": \"title\" },\n                { \"kind\": \"Field\", \"name\": \"year\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn abstract_typesfeature_can_request_fields_on_extended_interfaces () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    inStock\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{__typename sku}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"inventory\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            },\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"sku\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{inStock}...on Furniture{inStock}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn abstract_typesfeature_can_request_fields_on_extended_types_that_implement_an_interface () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    inStock\n    ... on Furniture {\n      isHeavy\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{__typename sku}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"inventory\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            },\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"sku\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{inStock}...on Furniture{inStock isHeavy}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn abstract_typesfeature_prunes_unfilled_type_conditions () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    inStock\n    ... on Furniture {\n      isHeavy\n    }\n    ... on Book {\n      isCheckedOut\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{__typename sku}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"inventory\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            },\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"sku\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{inStock isCheckedOut}...on Furniture{inStock isHeavy}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn abstract_typesfeature_fetches_interfaces_returned_from_other_services () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUserAndProducts {\n  me {\n    reviews {\n      product {\n        price\n        ... on Book {\n          title\n        }\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{__typename upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"product\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                },\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Furniture\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"upc\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{price}...on Furniture{price}}}\"\n            }\n          },\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"books\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{title}}}\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn abstract_typesfeature_fetches_composite_fields_from_a_foreign_type_casted_to_an_interface_provides_field () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUserAndProducts {\n  me {\n    reviews {\n      product {\n        price\n        ... on Book {\n          name\n        }\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{__typename upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Parallel\",\n        \"nodes\": [\n          {\n            \"kind\": \"Flatten\",\n            \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n            \"node\": {\n              \"kind\": \"Fetch\",\n              \"serviceName\": \"product\",\n              \"requires\": [\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Book\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"isbn\" }\n                  ]\n                },\n                {\n                  \"kind\": \"InlineFragment\",\n                  \"typeCondition\": \"Furniture\",\n                  \"selections\": [\n                    { \"kind\": \"Field\", \"name\": \"__typename\" },\n                    { \"kind\": \"Field\", \"name\": \"upc\" }\n                  ]\n                }\n              ],\n              \"variableUsages\": [],\n              \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{price}...on Furniture{price}}}\"\n            }\n          },\n          {\n            \"kind\": \"Sequence\",\n            \"nodes\": [\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"books\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{__typename isbn title year}}}\"\n                }\n              },\n              {\n                \"kind\": \"Flatten\",\n                \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n                \"node\": {\n                  \"kind\": \"Fetch\",\n                  \"serviceName\": \"product\",\n                  \"requires\": [\n                    {\n                      \"kind\": \"InlineFragment\",\n                      \"typeCondition\": \"Book\",\n                      \"selections\": [\n                        { \"kind\": \"Field\", \"name\": \"__typename\" },\n                        { \"kind\": \"Field\", \"name\": \"isbn\" },\n                        { \"kind\": \"Field\", \"name\": \"title\" },\n                        { \"kind\": \"Field\", \"name\": \"year\" }\n                      ]\n                    }\n                  ],\n                  \"variableUsages\": [],\n                  \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{name}}}\"\n                }\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn abstract_typesfeature_allows_for_extending_an_interface_from_another_service_with_fields () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetProduct($upc: String!) {\n  product(upc: $upc) {\n    reviews {\n      body\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"product\",\n        \"variableUsages\": [\"upc\"],\n        \"operation\": \"query($upc:String!){product(upc:$upc){__typename ...on Book{__typename isbn}...on Furniture{__typename upc}}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            },\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"upc\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{reviews{body}}...on Furniture{reviews{body}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn abstract_typesfeature_handles_unions_from_the_same_service () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUserAndProducts {\n  me {\n    reviews {\n      product {\n        price\n        ... on Furniture {\n          brand {\n            ... on Ikea {\n              asile\n            }\n            ... on Amazon {\n              referrer\n            }\n          }\n        }\n      }\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Sequence\",\n    \"nodes\": [\n      {\n        \"kind\": \"Fetch\",\n        \"serviceName\": \"accounts\",\n        \"variableUsages\": [],\n        \"operation\": \"{me{__typename id}}\"\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"reviews\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"User\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"id\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on User{reviews{product{__typename ...on Book{__typename isbn}...on Furniture{__typename upc}}}}}}\"\n        }\n      },\n      {\n        \"kind\": \"Flatten\",\n        \"path\": [\"me\", \"reviews\", \"@\", \"product\"],\n        \"node\": {\n          \"kind\": \"Fetch\",\n          \"serviceName\": \"product\",\n          \"requires\": [\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Book\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"isbn\" }\n              ]\n            },\n            {\n              \"kind\": \"InlineFragment\",\n              \"typeCondition\": \"Furniture\",\n              \"selections\": [\n                { \"kind\": \"Field\", \"name\": \"__typename\" },\n                { \"kind\": \"Field\", \"name\": \"upc\" }\n              ]\n            }\n          ],\n          \"variableUsages\": [],\n          \"operation\": \"query($representations:[_Any!]!){_entities(representations:$representations){...on Book{price}...on Furniture{price brand{__typename ...on Ikea{asile}...on Amazon{referrer}}}}}\"\n        }\n      }\n    ]\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn single_servicefeature_does_not_remove___typename_on_root_types () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUser {\n  __typename\n}\n" , "\n{\"kind\":\"QueryPlan\"}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn single_servicefeature_does_not_remove___typename_if_that_is_all_that_is_requested_on_an_entity () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUser {\n  me {\n    __typename\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"accounts\",\n    \"variableUsages\": [],\n    \"operation\": \"{me{__typename}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }# [test] fn single_servicefeature_does_not_remove___typename_if_that_is_all_that_is_requested_on_a_value_type () { assert_query_plan (include_str ! ("basic/schema.graphql") , "\nquery GetUser {\n  me {\n    account {\n      __typename\n    }\n  }\n}\n" , "\n{\n  \"kind\": \"QueryPlan\",\n  \"node\": {\n    \"kind\": \"Fetch\",\n    \"serviceName\": \"accounts\",\n    \"variableUsages\": [],\n    \"operation\": \"{me{account{__typename}}}\"\n  }\n}\n" , QueryPlanningOptions { auto_fragmentization : false }) ; }